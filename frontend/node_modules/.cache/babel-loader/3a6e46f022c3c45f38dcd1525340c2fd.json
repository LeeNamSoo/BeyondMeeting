{"remainingRequest":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\src\\views\\main\\components\\login-dialog.vue?vue&type=template&id=8abafc6e","dependencies":[{"path":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\src\\views\\main\\components\\login-dialog.vue","mtime":1641885534316},{"path":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImRpYWxvZy1mb290ZXIiCn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCLroZzqt7jsnbgiKTsKCmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfZWxfYnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoImVsLWJ1dHRvbiIpOwoKICB2YXIgX2NvbXBvbmVudF9lbF9kaWFsb2cgPSBfcmVzb2x2ZUNvbXBvbmVudCgiZWwtZGlhbG9nIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2RpYWxvZywgewogICAgImN1c3RvbS1jbGFzcyI6ICJsb2dpbi1kaWFsb2ciLAogICAgdGl0bGU6ICLroZzqt7jsnbgiLAogICAgbW9kZWxWYWx1ZTogJHNldHVwLnN0YXRlLmRpYWxvZ1Zpc2libGUsCiAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJHNldHVwLnN0YXRlLmRpYWxvZ1Zpc2libGUgPSAkZXZlbnQ7CiAgICB9KSwKICAgIG9uQ2xvc2U6ICRzZXR1cC5oYW5kbGVDbG9zZQogIH0sIHsKICAgIGZvb3RlcjogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gW19jcmVhdGVWTm9kZSgic3BhbiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9lbF9idXR0b24sIHsKICAgICAgICB0eXBlOiAicHJpbWFyeSIsCiAgICAgICAgb25DbGljazogJHNldHVwLmNsaWNrTG9naW4KICAgICAgfSwgewogICAgICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbX2hvaXN0ZWRfMl07CiAgICAgICAgfSksCiAgICAgICAgXzogMQogICAgICAgIC8qIFNUQUJMRSAqLwoKICAgICAgfSwgOAogICAgICAvKiBQUk9QUyAqLwogICAgICAsIFsib25DbGljayJdKV0pXTsKICAgIH0pLAogICAgXzogMQogICAgLyogU1RBQkxFICovCgogIH0sIDgKICAvKiBQUk9QUyAqLwogICwgWyJtb2RlbFZhbHVlIiwgIm9uQ2xvc2UiXSk7Cn0="},{"version":3,"sources":["C:\\Users\\multicampus\\Git\\공통PJT\\skeleton-project\\frontend\\src\\views\\main\\components\\login-dialog.vue"],"names":[],"mappings":";;AAWY,EAAA,KAAK,EAAC;;;+CACoC,K;;;;;;;uBAXpD,YAAA,CAcY,oBAdZ,EAcY;AAdD,oBAAa,cAcZ;AAd2B,IAAA,KAAK,EAAC,KAcjC;gBAdgD,MAAA,CAAA,KAAA,CAAM,aActD;;aAdgD,MAAA,CAAA,KAAA,CAAM,aAAN,GAAmB,M;MAcnE;AAdsE,IAAA,OAAK,EAAE,MAAA,CAAA;AAc7E,GAdZ,E;AASa,IAAA,MAAM,EAAA,QAAA,CACf;AAAA,aAEO,CAFP,YAAA,CAEO,MAFP,EAAA,UAAA,EAEO,CADL,YAAA,CAA6D,oBAA7D,EAA6D;AAAlD,QAAA,IAAI,EAAC,SAA6C;AAAlC,QAAA,OAAK,EAAE,MAAA,CAAA;AAA2B,OAA7D,E;0BAA8C;AAAA,iBAAG,C,UAAA,CAAH;AAAA,S;;;;OAA9C,E;;AAAA,Q,WAAA,CACK,CAFP,CAEO,CAFP;AAAA,KADe,C;;;;GATnB,E;;AAAA,I,yBAAA,C","sourcesContent":["<template>\r\n  <el-dialog custom-class=\"login-dialog\" title=\"로그인\" v-model=\"state.dialogVisible\" @close=\"handleClose\">\r\n    <!-- <el-form :model=\"state.form\" :rules=\"state.rules\" ref=\"loginForm\" :label-position=\"state.form.align\">\r\n      <el-form-item prop=\"id\" label=\"아이디\" :label-width=\"state.formLabelWidth\" >\r\n        <el-input v-model=\"state.form.id\" autocomplete=\"off\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item prop=\"password\" label=\"비밀번호\" :label-width=\"state.formLabelWidth\">\r\n        <el-input v-model=\"state.form.password\" autocomplete=\"off\" show-password></el-input>\r\n      </el-form-item>\r\n    </el-form> -->\r\n    <template #footer>\r\n      <span class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"clickLogin\">로그인</el-button>\r\n      </span>\r\n    </template>\r\n  </el-dialog>\r\n\r\n</template>\r\n<style>\r\n.login-dialog {\r\n  width: 400px !important;\r\n  height: 300px;\r\n}\r\n.login-dialog .el-dialog__headerbtn {\r\n  float: right;\r\n}\r\n.login-dialog .el-form-item__content {\r\n  margin-left: 0 !important;\r\n  float: right;\r\n  width: 200px;\r\n  display: inline-block;\r\n}\r\n.login-dialog .el-form-item {\r\n  margin-bottom: 20px;\r\n}\r\n.login-dialog .el-form-item__error {\r\n  font-size: 12px;\r\n  color: red;\r\n}\r\n.login-dialog .el-input__suffix {\r\n  display: none;\r\n}\r\n.login-dialog .el-dialog__footer {\r\n  margin: 0 calc(50% - 80px);\r\n  padding-top: 0;\r\n  display: inline-block;\r\n}\r\n.login-dialog .dialog-footer .el-button {\r\n  width: 120px;\r\n}\r\n</style>\r\n<script>\r\nimport { reactive, computed, ref, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\n\r\nexport default {\r\n  name: 'login-dialog',\r\n\r\n  props: {\r\n    open: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  setup(props, { emit }) {\r\n    const store = useStore()\r\n    // 마운드 이후 바인딩 될 예정 - 컨텍스트에 노출시켜야함. <return>\r\n    const loginForm = ref(null)\r\n\r\n    /*\r\n      // Element UI Validator\r\n      // rules의 객체 키 값과 form의 객체 키 값이 같아야 매칭되어 적용됨\r\n      //\r\n    */\r\n    const state = reactive({\r\n      form: {\r\n        id: '',\r\n        password: '',\r\n        align: 'left'\r\n      },\r\n      rules: {\r\n        id: [\r\n          { required: true, message: 'Please input ID', trigger: 'blur' }\r\n        ],\r\n        password: [\r\n          { required: true, message: 'Please input password', trigger: 'blur' }\r\n        ]\r\n      },\r\n      dialogVisible: computed(() => props.open),\r\n      formLabelWidth: '120px'\r\n    })\r\n\r\n    onMounted(() => {\r\n      // console.log(loginForm.value)\r\n    })\r\n\r\n    // const clickLogin = function () {\r\n    //   // 로그인 클릭 시 validate 체크 후 그 결과 값에 따라, 로그인 API 호출 또는 경고창 표시\r\n    //   loginForm.value.validate((valid) => {\r\n    //     if (valid) {\r\n    //       console.log('submit')\r\n    //       store.dispatch('root/requestLogin', { id: state.form.id, password: state.form.password })\r\n    //       .then(function (result) {\r\n    //         alert('accessToken: ' + result.data.accessToken)\r\n    //       })\r\n    //       .catch(function (err) {\r\n    //         alert(err)\r\n    //       })\r\n    //     } else {\r\n    //       alert('Validate error!')\r\n    //     }\r\n    //   });\r\n    // }\r\n\r\n    const handleClose = function () {\r\n      state.form.id = ''\r\n      state.form.password = ''\r\n      emit('closeLoginDialog')\r\n    }\r\n\r\n   \r\n\r\n    return { loginForm, state, clickLogin, handleClose }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":""}]}